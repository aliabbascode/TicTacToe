import pygame
pygame.init()
screen_width=600
screen_height=600
screen=pygame.display.set_mode((screen_height,screen_width))
pygame.display.set_caption("TicTacToe")
circle_image=pygame.image.load("F:\circle1.png")
cross_image=pygame.image.load("F:\cross.png")
font=pygame.font.Font("F:\Montserrat-Regular.ttf", 70)


board= [[0,0,0],[0,0,0],[0,0,0]]
def text_object(text,color):
    test_surface=font.render(text, True, color)
    return test_surface, test_surface.get_rect()

def msg_screen(text,color):
    textSurf, textRect=text_object(text,color)
    textRect.center=screen_width/2, screen_height/2
    screen.blit(textSurf, textRect)

def game_over(winner):
    run=True
    while run:
        screen.fill((5, 130, 124))
        msg_screen(winner, (138, 255, 214))
        pygame.display.update()
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                run=False

def get_pos(x,y):
    if x>0 and x<200:
        col=0
    elif x>200 and x<400:
        col=1
    elif x>400 and x<600:
        col=2
    if y>0 and y<200:
        row=0
    elif y>200 and y<400:
        row=1
    elif y>400 and y<600:
        row=2
    return (row,col)

def get_box(coordinate):
    if coordinate==(0,0):
        return(0,0)
    elif coordinate==(0,1):
        return(210,0)
    elif coordinate==(0,2):
        return(410,0)
    elif coordinate==(1,0):
        return (0,210)
    elif coordinate== (1,1):
        return (210, 210)
    elif coordinate==(1,2):
        return (410,210)
    elif coordinate==(2,0):
        return (0,410)
    elif coordinate==(2,1):
        return (210,410)
    elif coordinate==(2,2):
        return (410,410)



def board_check(board):
    if board[0][0]==board[0][1]==board[0][2] and board[0][0]!=0:
        return board[0][0]
    elif board[1][0]==board[1][1]==board[1][2] and board[1][0]!=0:
        return board[1][0]
    elif board[2][0]==board[2][1]==board[2][2] and board[2][0]!=0:
        return board[2][0]
    elif board[0][0]==board[1][0]==board[2][0] and board[0][0]!=0:
        return board [0][0]
    elif board[0][1]==board[1][1]==board[2][1] and board[0][1]!=0:
        return board [0][1]
    elif board[0][2]==board[1][2]==board[2][2] and board[0][2]!=0:
        return board [0][2]
    elif board[0][0]==board[1][1]==board[2][2] and board[0][0]!=0:
        return board[0][0]
    elif board[0][2]==board[1][1]==board[2][0] and board[0][2]!=0:
        return board[0][2]


running=True

box_status=[]

current_turn= "cross"

occupied_boxes=[]

color_screen = (138, 197, 242)
color= (5, 17, 66)
screen.fill(color_screen)

while running:


    pygame.draw.rect(screen, color, ((screen_width/3),0, 10, screen_height))
    pygame.draw.rect(screen, color, ((screen_width*2 / 3), 0, 10, screen_height))
    pygame.draw.rect(screen,color,(0,screen_height/3,screen_width,10))
    pygame.draw.rect(screen, color, (0, screen_height*2 / 3, screen_width, 10))

    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            cords = pygame.mouse.get_pos()
            mouse_position = get_pos(cords[0], cords[1])
            box_coordinate = get_box(mouse_position)
            if box_coordinate not in occupied_boxes:
                if current_turn == "cross":
                    box_status.append([cross_image, box_coordinate])
                    current_turn = "circle"
                    board[mouse_position[0]][mouse_position[1]] = 4
                else:
                    box_status.append([circle_image, box_coordinate])
                    current_turn = "cross"
                    board[mouse_position[0]][mouse_position[1]] = 5
            occupied_boxes.append(box_coordinate)
        for boxes in box_status:
            screen.blit(boxes[0], boxes[1])


        if event.type==pygame.QUIT:
            running=False


    if board_check(board)==4:
        game_over("Cross Won")
        running=False
    if board_check(board)==5:
        game_over("Circle Won")
        running= False
    if len(box_status)==9:
        game_over("Game Draw")
        running=False

    pygame.display.update()
